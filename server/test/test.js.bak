const chai = require('chai');
const chaiHttp = require('chai-http');
const app = require('../app.js');

chai.use(chaiHttp);
const should = chai.should();

// formats

const newUserOrder = {
    name: 'Fortune King',
    email: 'kingstonfortune@gmail.com',
    meal: 'rice',
    quantity: 1,
    price: 200,
    location: 'Lekki, Lagos',
}

const invalidUserOrder = {
    name: 'John Doe',
    email: 'john@doe.com',
    meal: 'egusi soup',
    quantity: 2,
    price: 400,
    location: 'Lagos',
}

const emptyUserInputs = {
    name: '',
    email: '',
    meal: '',
    quantity: '',
    price: '',
    location: '',
}

const invalidEmail = {
    email: 'qwerty@asdf',
}

const statusToUpdateTo = {
    status: 'completed',
}

const emptyStatus = '';

describe('Fast-Food-Fast Test Suite', () => {

    // Place a new order

    // Get homepage
    describe('GET /', () => {
        it('should return welcome page on visit to /', (done) => {
            chai.request(app)
                .get('/')
                .end((err, res) => {
                    if (err) throw err;
                    res.status.should.equal(200);
                    res.body.should.be.a('object');
                    res.body.should.have.property('status');
                    res.body.should.have.property('message');
                    res.body.status.should.be.a('string');
                    res.body.status.should.equal('success');
                    res.body.message.should.be.a('string');
                    res.body.message.should.equal('Welcome to the Fast-Food-Fast API');
                    done();
                });
        });
    });

    describe(' GET /api/v1', () => {
        it('should return welcome page on visit to /api/v1', (done) => {
            chai.request(app)
                .get('/')
                .end((err, res) => {
                    if (err) throw err;
                    res.status.should.equal(200);
                    res.body.should.be.a('object');
                    res.body.should.have.property('status');
                    res.body.should.have.property('message');
                    res.body.status.should.be.a('string');
                    res.body.status.should.equal('success');
                    res.body.message.should.be.a('string');
                    res.body.message.should.equal('Welcome to the Fast-Food-Fast API');
                    done();
                });
        });
    });

    describe(' POST /orders', () => {
        it('should place a new order', (done) => {
            chai.request(app)
                .post('/api/v1/orders')
                .send(newUserOrder)
                .end((err, res) => {
                    if (err) throw err;
                    res.status.should.equal(201);
                    res.body.should.be.a('object');
                    res.body.should.have.property('success');
                    res.body.should.have.property('data');
                    res.body.success.should.be.a('boolean');
                    res.body.data.should.be.a('object');
                    res.body.success.should.equal(true);
                    res.body.data.message.should.be.a('string');
                    res.body.data.message.should.equal('Your order has been processed, thank you.');
                    done();
                });
        });
    });

    describe(' POST /orders', () => {
        it('should not place a new order', (done) => {
            chai.request(app)
                .post('/api/v1/orders')
                .send(invalidUserOrder)
                .end((err, res) => {
                    if (err) throw err;
                    res.status.should.equal(404);
                    res.body.should.be.a('object');
                    res.body.should.have.property('success');
                    res.body.should.have.property('data');
                    res.body.success.should.be.a('boolean');
                    res.body.data.should.be.a('object');
                    res.body.success.should.equal(false);
                    res.body.data.message.should.be.a('string');
                    res.body.data.message.should.equal('Sorry, user not found, order can not be placed');
                    done();
                });
        });
    });

    describe(' POST /orders', () => {
        it('should return error on empty input fields and not place a new order', (done) => {
            chai.request(app)
                .post('/api/v1/orders')
                .send(emptyUserInputs)
                .end((err, res) => {
                    if (err) throw err;
                    res.status.should.equal(400);
                    res.body.should.be.a('object');
                    res.body.should.have.property('success');
                    res.body.should.have.property('error');
                    res.body.success.should.be.a('boolean');
                    res.body.error.should.be.a('string');
                    res.body.success.should.equal(false);
                    done();
                });
        });
    });

    describe(' POST /orders', () => {
        it('should return error on invalid email and not place a new order', (done) => {
            chai.request(app)
                .post('/api/v1/orders')
                .send(invalidEmail)
                .end((err, res) => {
                    if (err) throw err;
                    res.status.should.equal(400);
                    res.body.should.be.a('object');
                    res.body.should.have.property('success');
                    res.body.should.have.property('error');
                    res.body.success.should.be.a('boolean');
                    res.body.error.should.be.a('string');
                    res.body.success.should.equal(false);
                    done();
                });
        });
    });


    // Get all orders
    describe(' GET /orders', () => {
        it('should fetch all orders', (done) => {
            chai.request(app)
                .get('/api/v1/orders?user_type=admin')
                .end((err, res) => {
                    if (err) throw err;
                    res.status.should.equal(200);
                    res.body.should.be.a('object');
                    res.body.should.have.property('status');
                    res.body.should.have.property('message');
                    res.body.should.have.property('data');
                    res.body.status.should.be.a('string');
                    res.body.message.should.be.a('string');
                    res.body.data.should.be.a('object');
                    res.body.status.should.equal('success');
                    res.body.message.should.equal('Here are the orders');
                    res.body.data.orders.should.be.a('array');
                    done();
                });
        });
    });

    describe(' GET /orders', () => {
        it('should fail on user not admin', (done) => {
            chai.request(app)
                .get('/api/v1/orders?user_type=user')
                .end((err, res) => {
                    if (err) throw err;
                    res.status.should.equal(403);
                    res.body.should.be.a('object');
                    res.body.should.have.property('status');
                    res.body.should.have.property('message');
                    res.body.should.have.property('data');
                    res.body.status.should.be.a('string');
                    res.body.message.should.be.a('string');
                    res.body.data.should.be.a('object');
                    res.body.status.should.equal('fail');
                    res.body.message.should.equal('Access denied!, you are not admin');
                    done();
                });
        });
    });

    // Get a specific order

    describe(' GET /orders/<orderId>', () => {
        it('should fetch a specific order', (done) => {
            chai.request(app)
                .get('/api/v1/orders/2?user_type=admin')
                .end((err, res) => {
                    if (err) throw err;
                    res.status.should.equal(200);
                    res.body.should.be.a('object');
                    res.body.should.have.property('status');
                    res.body.should.have.property('data');
                    res.body.status.should.be.a('string');
                    res.body.data.should.be.a('object');
                    res.body.status.should.equal('success');
                    res.body.data.message.should.be.a('string');
                    res.body.data.order.should.be.a('object');
                    res.body.data.message.should.equal('order returned');
                    done();
                });
        });
    });

    describe(' GET /orders/<orderId>', () => {
        it('should not fetch a specific order', (done) => {
            chai.request(app)
                .get('/api/v1/orders/100?user_type=admin')
                .end((err, res) => {
                    if (err) throw err;
                    res.status.should.equal(404);
                    res.body.should.be.a('object');
                    res.body.should.have.property('status');
                    res.body.should.have.property('data');
                    res.body.status.should.be.a('string');
                    res.body.data.should.be.a('object');
                    res.body.status.should.equal('fail');
                    res.body.data.message.should.be.a('string');
                    res.body.data.message.should.equal('Error!, order with id => 100, not found');
                    done();
                });
        });
    });

    // Update the status of an order

    describe(' PUT /orders', () => {
        it('should update the status of an order', (done) => {
            chai.request(app)
                .put('/api/v1/orders/2?user_type=admin')
                .send(statusToUpdateTo)
                .end((err, res) => {
                    if (err) throw err;
                    res.status.should.equal(200);
                    res.body.should.be.a('object');
                    res.body.should.have.property('status');
                    res.body.should.have.property('data');
                    res.body.status.should.be.a('string');
                    res.body.data.should.be.a('object');
                    res.body.status.should.equal('success');
                    res.body.data.message.should.be.a('string');
                    res.body.data.order.should.be.a('array');
                    res.body.data.message.should.equal('Status of order with id => 2, updated successfully.');
                    done();
                });
        });
    });


    describe(' PUT /orders', () => {
        it('should not update the status of an order', (done) => {
            chai.request(app)
                .put('/api/v1/orders/100?user_type=admin')
                .send(statusToUpdateTo)
                .end((err, res) => {
                    if (err) throw err;
                    res.status.should.equal(404);
                    res.body.should.be.a('object');
                    res.body.should.have.property('status');
                    res.body.should.have.property('data');
                    res.body.status.should.be.a('string');
                    res.body.data.should.be.a('object');
                    res.body.status.should.equal('fail');
                    res.body.data.message.should.be.a('string');
                    res.body.data.message.should.equal('Error!, order with id => 100, not found');
                    done();
                });
        });
    });

    describe(' PUT /orders', () => {
        it('should fail on empty status field', (done) => {
            chai.request(app)
                .put('/api/v1/orders/2?user_type=admin')
                .send(emptyStatus)
                .end((err, res) => {
                    if (err) throw err;
                    res.status.should.equal(400);
                    res.body.should.be.a('object');
                    res.body.should.have.property('status');
                    res.body.should.have.property('data');
                    res.body.status.should.be.a('string');
                    res.body.data.should.be.a('object');
                    res.body.status.should.equal('fail');
                    res.body.data.message.should.equal('status cannot be empty');
                    done();
                });
        });
    });

    // 404 Not Found
    describe(' GET /*', () => {
        it('should return 404 if the page is not found', (done) => {
            chai.request(app)
                .get('/api/v1/*')
                .end((err, res) => {
                    if (err) throw err;
                    res.status.should.equal(404);
                    res.body.should.be.a('object');
                    res.body.should.have.property('status');
                    res.body.should.have.property('data');
                    res.body.status.should.be.a('string');
                    res.body.data.should.be.a('object');
                    res.body.status.should.equal('fail');
                    res.body.data.message.should.be.a('string');
                    res.body.data.message.should.equal('404, page not found');
                    done();
                });
        });
    });

});